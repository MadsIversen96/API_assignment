{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "My API",
    "description": "Documentation automatically generated by the <b>swagger-autogen</b> module."
  },
  "host": "localhost:3000",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Logs in an existing user.(Remember to signup a user first)",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You are logged in"
          },
          "400": {
            "description": "Password is required."
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "500": {
            "description": "Something went wrong with creating JWT token"
          }
        }
      }
    },
    "/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Signs up a user.",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Signup"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You created an account."
          },
          "400": {
            "description": "Provided email is already in use."
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          }
        }
      }
    },
    "/": {
      "delete": {
        "tags": [
          "Users"
        ],
        "description": "Deletes a user.",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DeleteUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "You deleted an account."
          },
          "400": {
            "description": "Provided email is already in use."
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No such user in the database"
          }
        }
      }
    },
    "/category/": {
      "get": {
        "tags": [
          "Categories"
        ],
        "description": "Gets the list of all available categories. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No categories found"
          },
          "500": {
            "description": "An error occurred while fetching categories"
          }
        }
      },
      "post": {
        "tags": [
          "Categories"
        ],
        "description": "Creates a new category.(Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created category"
          },
          "400": {
            "description": "Missing required property"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "500": {
            "description": "An error occurred while creating category"
          }
        }
      }
    },
    "/category/{id}": {
      "put": {
        "tags": [
          "Categories"
        ],
        "description": "Updates a category based on their id.(Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PutCategory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "An error occurred while updating category"
          }
        }
      },
      "delete": {
        "tags": [
          "Categories"
        ],
        "description": "Deletes a category based on their id. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Category updated successfully"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "Category not found"
          },
          "500": {
            "description": "An error occurred while deleting category"
          }
        }
      }
    },
    "/todo/": {
      "get": {
        "tags": [
          "Todos"
        ],
        "description": "Gets the list of all the logged in users todos that does not have the DELETED status. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non deleted todos"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No todos found for the user"
          },
          "500": {
            "description": "An error occurred while fetching todos"
          }
        }
      },
      "post": {
        "tags": [
          "Todos"
        ],
        "description": "The logged in user can add a new todo. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PostTodo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new todo added"
          },
          "400": {
            "description": "Missing required properties"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "500": {
            "description": "An error occurred while trying to add a new todo"
          }
        }
      }
    },
    "/todo/all": {
      "get": {
        "tags": [
          "Todos"
        ],
        "description": "Gets the list of all the logged in users todos, all statuses included. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all todos"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No todos found for the user"
          },
          "500": {
            "description": "An error occurred while fetching todos"
          }
        }
      }
    },
    "/todo/deleted": {
      "get": {
        "tags": [
          "Todos"
        ],
        "description": "Gets the list of all the logged in users todos that have a DELETED status. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of todos"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No todos found for the user"
          },
          "500": {
            "description": "An error occurred while fetching todos"
          }
        }
      }
    },
    "/todo/statuses": {
      "get": {
        "tags": [
          "Todos"
        ],
        "description": "Get a list of all the available statuses. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of statuses"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No statuses found"
          },
          "500": {
            "description": "An error occurred while fetching all statuses"
          }
        }
      }
    },
    "/todo/{id}": {
      "put": {
        "tags": [
          "Todos"
        ],
        "description": "Updates an todo based on their id. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/PutTodo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Todo updated successfully"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No todo found"
          },
          "500": {
            "description": "An error occurred while updating the todo"
          }
        }
      },
      "delete": {
        "tags": [
          "Todos"
        ],
        "description": "Delete a specific todo based on their id for the logged in user. (Use token from Login response) <br>Authorization format example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwiZW1haWwiOiJ1c2VyQGV4YW1wbGUuY29tIiwiaWF0IjoxNjk3ODEwMzAyLCJleHAiOjE2O",
        "produces": [
          "json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Todo deleted successfully"
          },
          "401": {
            "description": "Unauthorized: Invalid token"
          },
          "404": {
            "description": "No todo found"
          },
          "500": {
            "description": "An error occurred while deleting the todo"
          }
        }
      }
    }
  },
  "definitions": {
    "PostCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Work"
        }
      },
      "required": [
        "name"
      ]
    },
    "PostTodo": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Meeting"
        },
        "description": {
          "type": "string",
          "example": "Starts at 9am"
        },
        "categoryId": {
          "type": "number",
          "example": 1
        },
        "statusId": {
          "type": "number",
          "example": 1
        }
      },
      "required": [
        "name",
        "description",
        "categoryId",
        "statusId"
      ]
    },
    "PutCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "Home"
        }
      },
      "required": [
        "name"
      ]
    },
    "Login": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "example": "P4ssword"
        }
      },
      "required": [
        "email",
        "password"
      ]
    },
    "Signup": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "User"
        },
        "email": {
          "type": "string",
          "example": "user@example.com"
        },
        "password": {
          "type": "string",
          "example": "P4ssword"
        }
      },
      "required": [
        "name",
        "email",
        "password"
      ]
    },
    "DeleteUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "example": "user@example.com"
        }
      },
      "required": [
        "email"
      ]
    },
    "PutTodo": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "example": "Starts at 11am"
        }
      },
      "required": [
        "description"
      ]
    }
  }
}